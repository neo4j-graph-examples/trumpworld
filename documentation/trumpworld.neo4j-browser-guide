= Trumpworld
:google_sheet_url: 'https://docs.google.com/spreadsheets/d/1Z5Vo5pbvxKJ5XpfALZXvCzW26Cl4we3OaN73K9Ae5Ss/export?format=csv&id=1Z5Vo5pbvxKJ5XpfALZXvCzW26Cl4we3OaN73K9Ae5Ss&gid=1996904412'

== The Trumpworld Graph

As part of the Buzzfeed article https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld?utm_term=.kd5QM0z1q#.ekLzoZ316[Help Us Map TrumpWorld], the four investigative journalists, John Templon, Alex Campbell, Anthony Cormier, and Jeremy Singer-Vine asked the public to help them map and analyze the data that they investigated, confirmed and published:


____
Now we are asking the public to use our data to find connections we may have missed, and to give us context we don’t currently understand. 
We hope you will help us — and the public — learn more about TrumpWorld and how this unprecedented array of businesses might affect public policy.
____

image::https://img.buzzfeed.com/buzzfeed-static/static/2017-01/13/13/asset/buzzfeed-prod-fastlane-01/sub-buzz-31493-1484333437-1.jpg?no-auto[]

== Looking at the Data

The https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld[Buzzfeed article] linked int he tweet points to a Google Spreadsheet with collected and verified/researched data of relationships of Trump organizations to other organizations, in total we have 770 organizations (as of today) with 611 relationships.

There is a great blog post covering modeling, importing, and querying this data in Neo4j https://neo4j.com/blog/buzzfeed-trumpworld-dataset-neo4j/[here].

The data is fortunately available as a public google doc, so we can use our old trick of loading the CSV-Download URL with `LOAD CSV` into Neo4j.

Let's have a look at the data first, here as a sample:

[source,cypher,subs=attributes]
----
WITH 
{google_sheet_url} AS url
LOAD CSV WITH HEADERS FROM url AS row
RETURN row.`Entity A`,row.`Entity B`,row.Connection, row.`Source(s)`
LIMIT 5
----

== Most Connected People and Organizations

The most frequently mentioned organizations and people can be found with this query:

[source,cypher,subs=attributes]
----
WITH 
{google_sheet_url} AS url
LOAD CSV FROM url AS row
WITH row
UNWIND  row[1..2] AS org
RETURN org, count(*)
ORDER BY count(*) DESC LIMIT 10
----

== What kind of connections exist in the data?

What kind of relationships exist in the data:


[source,cypher,subs=attributes]
----
WITH 
{google_sheet_url} AS url
LOAD CSV WITH HEADERS FROM url AS row
RETURN row.Connection AS type, count(*)
ORDER BY count(*) DESC
----

== The Labeled Property Graph Model

image::{img}/datamodel.png[]

*How could we model this data as a graph?*

The data model we work with in Neo4j is called the labeled property graph. The main elements of the model are: 

* *Nodes* - these are the entities or objects in the graph.
* *Labels* - nodes can have one or more labels. Labels define the type or class of the node (such as `Person` or `Organization`)
* *Relationships* - relationships connect nodes. Relationships have a single type and direction.
* *Properties* - we can store key-value pair properties on nodes and relationships.

== Working With Neo4j

Let's first identify the tools and concepts we'll be using:

.Neo4j Tools

* *Neo4j Browser* - Neo4j Browser (this web application!) is a query workbench for querying Neo4j and visualizing the results.
* *Cypher* - Cypher is the query language for graphs used to interact with Neo4j. Cypher is an expressive query language designed for graphs that allows the user to define graph queries defining a traversal.
* *`LOAD CSV`* - functionality built into Cypher that allows for importing data into Neo4j from CSV / flat files.

Next, let's introduce the dataset we'll be using today.


